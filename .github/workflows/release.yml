name: Release

on:
  push:
    tags:
      - 'v*'
  pull_request:
  workflow_dispatch:
    inputs:
      tag:
        description: 'Release tag (for example v1.2.3)'
        required: true

jobs:
  sync-version:
    name: Sync Version Metadata
    if: ${{ (github.ref_type == 'tag' && startsWith(github.ref_name, 'v')) || (github.event.inputs.tag && startsWith(github.event.inputs.tag, 'v')) }}
    runs-on: ubuntu-latest
    permissions:
      contents: write
    outputs:
      release_tag: ${{ steps.context.outputs.release_tag }}
      release_ref: ${{ steps.context.outputs.release_ref }}
      release_version: ${{ steps.context.outputs.release_version }}
      default_branch: ${{ steps.context.outputs.default_branch }}
      changes_detected: ${{ steps.diff.outputs.changed }}
    steps:
      - name: Resolve release context
        id: context
        shell: bash
        env:
          EVENT_NAME: ${{ github.event_name }}
          REF_TYPE: ${{ github.ref_type }}
          REF_NAME: ${{ github.ref_name }}
          INPUT_TAG: ${{ github.event.inputs.tag || '' }}
          DEFAULT_BRANCH: ${{ github.event.repository.default_branch || 'master' }}
        run: |
          tag=""
          if [[ "$EVENT_NAME" == "workflow_dispatch" ]]; then
            tag="$INPUT_TAG"
          elif [[ "$REF_TYPE" == "tag" ]]; then
            tag="$REF_NAME"
          fi

          if [[ -z "$tag" ]]; then
            echo "Release tag is required (tag push or workflow input)." >&2
            exit 1
          fi

          version="${tag#v}"
          if [[ "$version" == "$tag" ]]; then
            version="$tag"
          fi

          echo "release_tag=$tag" >> "$GITHUB_OUTPUT"
          echo "release_ref=refs/tags/$tag" >> "$GITHUB_OUTPUT"
          echo "release_version=$version" >> "$GITHUB_OUTPUT"
          echo "default_branch=$DEFAULT_BRANCH" >> "$GITHUB_OUTPUT"

          echo "RELEASE_TAG=$tag" >> "$GITHUB_ENV"
          echo "RELEASE_REF=refs/tags/$tag" >> "$GITHUB_ENV"
          echo "RELEASE_VERSION=$version" >> "$GITHUB_ENV"
          echo "TARGET_BRANCH=$DEFAULT_BRANCH" >> "$GITHUB_ENV"

      - name: Checkout target branch
        uses: actions/checkout@v5
        with:
          fetch-depth: 0
          ref: ${{ steps.context.outputs.default_branch }}

      - uses: actions/setup-node@v5
        with:
          node-version: 20

      - name: Update npm metadata
        shell: bash
        run: |
          current=$(node -p "require('./package.json').version")
          if [[ "$current" == "$RELEASE_VERSION" ]]; then
            echo "package.json already version $current; skipping."
          else
            npm version "$RELEASE_VERSION" --no-git-tag-version
          fi

      - name: Update Tauri config
        run: |
          node <<'NODE'
          const fs = require('fs');
          const version = process.env.RELEASE_VERSION;
          const file = 'src-tauri/tauri.conf.json';
          const content = fs.readFileSync(file, 'utf8');
          const json = JSON.parse(content);
          json.version = version;
          fs.writeFileSync(file, JSON.stringify(json, null, 2) + '\n');
          NODE

      - name: Detect changes
        id: diff
        run: |
          if git diff --quiet; then
            echo "changed=false" >> "$GITHUB_OUTPUT"
          else
            echo "changed=true" >> "$GITHUB_OUTPUT"
          fi

      - name: Abort on mismatched tag contents
        if: github.event_name != 'workflow_dispatch' && steps.diff.outputs.changed == 'true'
        run: |
          echo "Version files differ from release tag $RELEASE_TAG. Please update the code and recreate the tag before releasing." >&2
          exit 1

      - name: Commit version bump
        if: github.event_name == 'workflow_dispatch' && steps.diff.outputs.changed == 'true'
        uses: stefanzweifel/git-auto-commit-action@v5
        with:
          commit_message: 'chore: sync version to ${{ env.RELEASE_TAG }}'
          branch: ${{ env.TARGET_BRANCH }}
          commit_user_name: marlin-release-bot
          commit_user_email: releases@marlin.app

      - name: Ensure release tag exists
        if: github.event_name == 'workflow_dispatch'
        run: |
          git fetch --tags --force
          git tag -f "$RELEASE_TAG"
          git push origin "refs/tags/$RELEASE_TAG" --force

  release:
    name: Release (${{ matrix.os }} • ${{ matrix.arch }})
    needs: sync-version
    if: ${{ github.event_name != 'pull_request' && needs.sync-version.result == 'success' }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: macos-14
            target: universal-apple-darwin
            arch: universal
            rust-targets: x86_64-apple-darwin,aarch64-apple-darwin
          - os: windows-latest
            target: x86_64-pc-windows-msvc
            arch: x64
            rust-targets: x86_64-pc-windows-msvc
          - os: windows-latest
            target: aarch64-pc-windows-msvc
            arch: arm64
            rust-targets: aarch64-pc-windows-msvc
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            arch: x86_64
            rust-targets: x86_64-unknown-linux-gnu
          - os: ubuntu-24.04-arm
            target: aarch64-unknown-linux-gnu
            arch: arm64
            rust-targets: aarch64-unknown-linux-gnu
    permissions:
      contents: write
    env:
      RELEASE_TAG: ${{ needs.sync-version.outputs.release_tag || github.ref_name }}
      RELEASE_REF: ${{ needs.sync-version.outputs.release_ref || github.ref }}
    steps:
      - name: Validate release tag
        shell: bash
        run: |
          if [ -z "$RELEASE_TAG" ]; then
            echo "RELEASE_TAG is not available." >&2
            exit 1
          fi

      - name: Checkout code
        uses: actions/checkout@v5
        with:
          fetch-depth: 0
          ref: ${{ env.RELEASE_REF }}

      - name: Install dependencies (Ubuntu)
        if: startsWith(matrix.os, 'ubuntu')
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            build-essential \
            curl \
            wget \
            file \
            xdg-utils \
            pkg-config \
            libssl-dev \
            libgtk-3-dev \
            libayatana-appindicator3-dev \
            librsvg2-dev
          sudo apt-get install -y libwebkit2gtk-4.1-dev || sudo apt-get install -y libwebkit2gtk-4.0-dev

      - uses: actions/setup-node@v5
        with:
          node-version: 20
          cache: 'npm'
          cache-dependency-path: package-lock.json

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: stable
          profile: minimal
          override: true
          targets: ${{ matrix.rust-targets }}

      - name: Cache Rust build artifacts
        uses: Swatinem/rust-cache@v2
        with:
          workspaces: |
            src-tauri -> target
          shared-key: ${{ matrix.target }}
          cache-all-crates: true
          cache-on-failure: true

      - name: Cache Tauri downloads (Linux)
        if: runner.os == 'Linux'
        uses: actions/cache@v4
        with:
          path: ~/.cache/tauri
          key: tauri-${{ runner.os }}-${{ matrix.target }}-${{ hashFiles('src-tauri/tauri.conf.json') }}
          restore-keys: |
            tauri-${{ runner.os }}-${{ matrix.target }}-
            tauri-${{ runner.os }}-

      - name: Cache Tauri downloads (macOS)
        if: runner.os == 'macOS'
        uses: actions/cache@v4
        with:
          path: ~/Library/Caches/tauri
          key: tauri-${{ runner.os }}-${{ matrix.target }}-${{ hashFiles('src-tauri/tauri.conf.json') }}
          restore-keys: |
            tauri-${{ runner.os }}-${{ matrix.target }}-
            tauri-${{ runner.os }}-

      - name: Cache Tauri downloads (Windows)
        if: runner.os == 'Windows'
        uses: actions/cache@v4
        with:
          path: '${{ env.LOCALAPPDATA }}\\tauri'
          key: tauri-${{ runner.os }}-${{ matrix.target }}-${{ hashFiles('src-tauri/tauri.conf.json') }}
          restore-keys: |
            tauri-${{ runner.os }}-${{ matrix.target }}-
            tauri-${{ runner.os }}-

      - name: Install frontend dependencies
        run: npm ci

      - name: Build and publish installers
        uses: tauri-apps/tauri-action@v0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          TAURI_PRIVATE_KEY: ${{ secrets.TAURI_PRIVATE_KEY }}
          TAURI_KEY_PASSWORD: ${{ secrets.TAURI_KEY_PASSWORD }}
        with:
          tagName: ${{ env.RELEASE_TAG }}
          releaseName: Marlin ${{ env.RELEASE_TAG }}
          releaseBody: |
            Automated binaries for Marlin. Download the installer matching your platform.
          releaseDraft: false
          prerelease: ${{ startsWith(env.RELEASE_TAG, 'v0.') }}
          args: --target ${{ matrix.target }}

  release-dry-run:
    name: Dry Run (${{ matrix.os }} • ${{ matrix.arch }})
    if: ${{ github.event_name == 'pull_request' }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: macos-14
            target: universal-apple-darwin
            arch: universal
            rust-targets: x86_64-apple-darwin,aarch64-apple-darwin
          - os: windows-latest
            target: x86_64-pc-windows-msvc
            arch: x64
            rust-targets: x86_64-pc-windows-msvc
          - os: windows-latest
            target: aarch64-pc-windows-msvc
            arch: arm64
            rust-targets: aarch64-pc-windows-msvc
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            arch: x86_64
            rust-targets: x86_64-unknown-linux-gnu
          - os: ubuntu-24.04-arm
            target: aarch64-unknown-linux-gnu
            arch: arm64
            rust-targets: aarch64-unknown-linux-gnu
    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Install dependencies (Ubuntu)
        if: startsWith(matrix.os, 'ubuntu')
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            build-essential \
            curl \
            wget \
            file \
            xdg-utils \
            libssl-dev \
            libgtk-3-dev \
            libayatana-appindicator3-dev \
            librsvg2-dev \
            pkg-config
          sudo apt-get install -y libwebkit2gtk-4.1-dev || sudo apt-get install -y libwebkit2gtk-4.0-dev

      - uses: actions/setup-node@v5
        with:
          node-version: 20
          cache: 'npm'
          cache-dependency-path: package-lock.json

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: stable
          profile: minimal
          override: true
          targets: ${{ matrix.rust-targets }}

      - name: Cache Rust build artifacts
        uses: Swatinem/rust-cache@v2
        with:
          workspaces: |
            src-tauri -> target
          shared-key: pr-${{ matrix.target }}
          cache-all-crates: true
          cache-on-failure: true

      - name: Cache Tauri downloads (Linux)
        if: runner.os == 'Linux'
        uses: actions/cache@v4
        with:
          path: ~/.cache/tauri
          key: tauri-${{ runner.os }}-${{ matrix.target }}-${{ hashFiles('src-tauri/tauri.conf.json') }}
          restore-keys: |
            tauri-${{ runner.os }}-${{ matrix.target }}-
            tauri-${{ runner.os }}-

      - name: Cache Tauri downloads (macOS)
        if: runner.os == 'macOS'
        uses: actions/cache@v4
        with:
          path: ~/Library/Caches/tauri
          key: tauri-${{ runner.os }}-${{ matrix.target }}-${{ hashFiles('src-tauri/tauri.conf.json') }}
          restore-keys: |
            tauri-${{ runner.os }}-${{ matrix.target }}-
            tauri-${{ runner.os }}-

      - name: Cache Tauri downloads (Windows)
        if: runner.os == 'Windows'
        uses: actions/cache@v4
        with:
          path: '${{ env.LOCALAPPDATA }}\\tauri'
          key: tauri-${{ runner.os }}-${{ matrix.target }}-${{ hashFiles('src-tauri/tauri.conf.json') }}
          restore-keys: |
            tauri-${{ runner.os }}-${{ matrix.target }}-
            tauri-${{ runner.os }}-

      - name: Install frontend dependencies
        run: npm ci

      - name: Build Tauri bundle
        run: npm run tauri build -- --ci --target ${{ matrix.target }}
